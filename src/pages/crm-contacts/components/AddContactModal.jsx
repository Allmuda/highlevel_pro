import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import Icon from '../../../components/AppIcon';
import Button from '../../../components/ui/Button';
import Input from '../../../components/ui/Input';

const AddContactModal = ({ isOpen, onClose, onSave }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [selectedTags, setSelectedTags] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('');
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [savedContact, setSavedContact] = useState(null);

  const { register, handleSubmit, formState: { errors }, reset, watch } = useForm({
    defaultValues: {
      firstName: '',
      lastName: '',
      email: '',
      phone: '',
      company: '',
      position: '',
      notes: '',
      leadScore: 50,
      source: 'manual',
      status: 'active',
      industry: ''
    }
  });

  const availableTags = [
    { id: 'vip', label: 'VIP', color: 'bg-accent-100 text-accent-600' },
    { id: 'hot-lead', label: 'Hot Lead', color: 'bg-error-100 text-error-600' },
    { id: 'follow-up', label: 'Follow Up', color: 'bg-warning-100 text-warning-600' },
    { id: 'qualified', label: 'Qualified', color: 'bg-success-100 text-success-600' },
    { id: 'cold', label: 'Cold', color: 'bg-secondary-100 text-secondary-600' },
    { id: 'potential', label: 'Potential', color: 'bg-primary-100 text-primary-600' }
  ];

  const categories = [
    { id: 'leads', label: 'Leads' },
    { id: 'customers', label: 'Customers' },
    { id: 'prospects', label: 'Prospects' },
    { id: 'partners', label: 'Partners' },
    { id: 'vendors', label: 'Vendors' }
  ];

  const industries = [
    { value: 'technology', label: 'Technology' },
    { value: 'healthcare', label: 'Healthcare' },
    { value: 'finance', label: 'Finance' },
    { value: 'education', label: 'Education' },
    { value: 'retail', label: 'Retail' },
    { value: 'manufacturing', label: 'Manufacturing' },
    { value: 'consulting', label: 'Consulting' },
    { value: 'real-estate', label: 'Real Estate' },
    { value: 'other', label: 'Other' }
  ];

  const sources = [
    { value: 'manual', label: 'Manual Entry' },
    { value: 'website', label: 'Website' },
    { value: 'social-media', label: 'Social Media' },
    { value: 'referral', label: 'Referral' },
    { value: 'advertisement', label: 'Advertisement' },
    { value: 'import', label: 'Import' },
    { value: 'event', label: 'Event' },
    { value: 'cold-call', label: 'Cold Call' }
  ];

  const validateEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email) || 'Please enter a valid email address';
  };

  const validatePhone = (phone) => {
    const phoneRegex = /^(\+\d{1,3}[- ]?)?\d{10}$/;
    return phoneRegex.test(phone.replace(/[\s-]/g, '')) || 'Please enter a valid phone number';
  };

  const handleTagToggle = (tagId) => {
    setSelectedTags(prev => 
      prev.includes(tagId) 
        ? prev.filter(id => id !== tagId)
        : [...prev, tagId]
    );
  };

  const onSubmit = async (data) => {
    setIsLoading(true);
    
    try {
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const newContact = {
        id: Date.now(), // In real app, this would be generated by the backend
        name: `${data.firstName} ${data.lastName}`.trim(),
        firstName: data.firstName,
        lastName: data.lastName,
        email: data.email,
        phone: data.phone,
        company: data.company,
        position: data.position,
        notes: data.notes,
        leadScore: data.leadScore,
        source: data.source,
        status: data.status,
        industry: data.industry,
        tags: selectedTags,
        category: selectedCategory,
        lifecycleStage: 'lead',
        lastInteraction: new Date(),
        lastInteractionType: 'manual-entry',
        createdAt: new Date(),
        updatedAt: new Date()
      };

      setSavedContact(newContact);
      setShowConfirmation(true);
      
      // Save to parent component
      onSave?.(newContact);
      
    } catch (error) {
      console.error('Error saving contact:', error);
      // In real app, show error toast or notification
    } finally {
      setIsLoading(false);
    }
  };

  const handleClose = () => {
    if (showConfirmation) {
      setShowConfirmation(false);
      setSavedContact(null);
    }
    reset();
    setSelectedTags([]);
    setSelectedCategory('');
    onClose();
  };

  const handleConfirmationClose = () => {
    setShowConfirmation(false);
    setSavedContact(null);
    handleClose();
  };

  if (!isOpen) return null;

  // Confirmation Modal
  if (showConfirmation) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-1020 p-4">
        <div className="bg-surface rounded-lg shadow-xl w-full max-w-md">
          <div className="p-6 text-center">
            <div className="w-16 h-16 bg-success-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Icon name="CheckCircle" size={32} className="text-success" />
            </div>
            <h3 className="text-xl font-semibold text-text-primary mb-2">
              Contact Added Successfully!
            </h3>
            <p className="text-text-secondary mb-4">
              {savedContact?.name} has been added to your contacts and will be automatically synced with your CRM.
            </p>
            <div className="bg-muted rounded-lg p-4 mb-6">
              <div className="flex items-center justify-between text-sm">
                <span className="text-text-secondary">Contact ID:</span>
                <span className="font-medium text-text-primary">#{savedContact?.id}</span>
              </div>
              <div className="flex items-center justify-between text-sm mt-2">
                <span className="text-text-secondary">Category:</span>
                <span className="font-medium text-text-primary capitalize">
                  {savedContact?.category || 'Uncategorized'}
                </span>
              </div>
              <div className="flex items-center justify-between text-sm mt-2">
                <span className="text-text-secondary">Lead Score:</span>
                <span className="font-medium text-primary">{savedContact?.leadScore}/100</span>
              </div>
            </div>
            <div className="flex space-x-3">
              <Button
                variant="outline"
                size="sm"
                onClick={handleConfirmationClose}
                className="flex-1"
              >
                Close
              </Button>
              <Button
                variant="primary"
                size="sm"
                onClick={() => {
                  handleConfirmationClose();
                  // In real app, navigate to contact detail or create another
                }}
                className="flex-1"
              >
                Add Another
              </Button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-1020 p-4">
      <div className="bg-surface rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-border">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-primary-100 rounded-full flex items-center justify-center">
              <Icon name="UserPlus" size={20} className="text-primary" />
            </div>
            <div>
              <h2 className="text-xl font-semibold text-text-primary">Add New Contact</h2>
              <p className="text-text-secondary">Create a new contact and sync with your CRM</p>
            </div>
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={handleClose}
            iconName="X"
            disabled={isLoading}
          />
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit(onSubmit)} className="p-6 overflow-y-auto max-h-[75vh]">
          {/* Basic Information */}
          <div className="mb-8">
            <h3 className="text-lg font-medium text-text-primary mb-4">Basic Information</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-text-primary mb-2">
                  First Name <span className="text-error">*</span>
                </label>
                <Input
                  {...register('firstName', { required: 'First name is required' })}
                  placeholder="Enter first name"
                  error={errors.firstName?.message}
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-text-primary mb-2">
                  Last Name <span className="text-error">*</span>
                </label>
                <Input
                  {...register('lastName', { required: 'Last name is required' })}
                  placeholder="Enter last name"
                  error={errors.lastName?.message}
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-text-primary mb-2">
                  Email Address <span className="text-error">*</span>
                </label>
                <Input
                  type="email"
                  {...register('email', { 
                    required: 'Email is required',
                    validate: validateEmail
                  })}
                  placeholder="Enter email address"
                  error={errors.email?.message}
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-text-primary mb-2">
                  Phone Number <span className="text-error">*</span>
                </label>
                <Input
                  type="tel"
                  {...register('phone', { 
                    required: 'Phone number is required',
                    validate: validatePhone
                  })}
                  placeholder="+1 (555) 123-4567"
                  error={errors.phone?.message}
                />
              </div>
            </div>
          </div>

          {/* Company Information */}
          <div className="mb-8">
            <h3 className="text-lg font-medium text-text-primary mb-4">Company Information</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-text-primary mb-2">
                  Company Name
                </label>
                <Input
                  {...register('company')}
                  placeholder="Enter company name"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-text-primary mb-2">
                  Position/Title
                </label>
                <Input
                  {...register('position')}
                  placeholder="Enter position or job title"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-text-primary mb-2">
                  Industry
                </label>
                <select
                  {...register('industry')}
                  className="w-full px-3 py-2 border border-border rounded-lg bg-surface text-text-primary focus:ring-2 focus:ring-primary focus:border-primary"
                >
                  <option value="">Select industry</option>
                  {industries.map((industry) => (
                    <option key={industry.value} value={industry.value}>
                      {industry.label}
                    </option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-text-primary mb-2">
                  Lead Score
                </label>
                <div className="space-y-2">
                  <input
                    type="range"
                    min="0"
                    max="100"
                    {...register('leadScore', { valueAsNumber: true })}
                    className="w-full"
                  />
                  <div className="flex justify-between text-sm text-text-secondary">
                    <span>0</span>
                    <span className="font-medium text-primary">{watch('leadScore')}</span>
                    <span>100</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Tags and Categories */}
          <div className="mb-8">
            <h3 className="text-lg font-medium text-text-primary mb-4">Tags & Categories</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-text-primary mb-2">
                  Tags
                </label>
                <div className="flex flex-wrap gap-2">
                  {availableTags.map((tag) => (
                    <button
                      key={tag.id}
                      type="button"
                      onClick={() => handleTagToggle(tag.id)}
                      className={`inline-flex items-center px-3 py-1.5 rounded-full text-xs font-medium transition-all duration-150 ${
                        selectedTags.includes(tag.id)
                          ? `${tag.color} ring-2 ring-offset-1 ring-current`
                          : 'bg-secondary-100 text-secondary-600 hover:bg-secondary-200'
                      }`}
                    >
                      {tag.label}
                      {selectedTags.includes(tag.id) && (
                        <Icon name="X" size={12} className="ml-1" />
                      )}
                    </button>
                  ))}
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-text-primary mb-2">
                  Category
                </label>
                <select
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                  className="w-full px-3 py-2 border border-border rounded-lg bg-surface text-text-primary focus:ring-2 focus:ring-primary focus:border-primary"
                >
                  <option value="">Select category</option>
                  {categories.map((category) => (
                    <option key={category.id} value={category.id}>
                      {category.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </div>

          {/* Additional Information */}
          <div className="mb-8">
            <h3 className="text-lg font-medium text-text-primary mb-4">Additional Information</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <label className="block text-sm font-medium text-text-primary mb-2">
                  Source
                </label>
                <select
                  {...register('source')}
                  className="w-full px-3 py-2 border border-border rounded-lg bg-surface text-text-primary focus:ring-2 focus:ring-primary focus:border-primary"
                >
                  {sources.map((source) => (
                    <option key={source.value} value={source.value}>
                      {source.label}
                    </option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-text-primary mb-2">
                  Status
                </label>
                <select
                  {...register('status')}
                  className="w-full px-3 py-2 border border-border rounded-lg bg-surface text-text-primary focus:ring-2 focus:ring-primary focus:border-primary"
                >
                  <option value="active">Active</option>
                  <option value="inactive">Inactive</option>
                  <option value="pending">Pending</option>
                </select>
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-text-primary mb-2">
                Notes
              </label>
              <textarea
                {...register('notes')}
                rows={4}
                className="w-full px-3 py-2 border border-border rounded-lg bg-surface text-text-primary focus:ring-2 focus:ring-primary focus:border-primary resize-none"
                placeholder="Add any additional notes about this contact..."
              />
            </div>
          </div>

          {/* CRM Integration Info */}
          <div className="mb-8 p-4 bg-primary-50 border border-primary-200 rounded-lg">
            <div className="flex items-center space-x-2 mb-2">
              <Icon name="Zap" size={16} className="text-primary" />
              <span className="text-sm font-medium text-primary">CRM Integration</span>
            </div>
            <p className="text-sm text-text-secondary">
              This contact will be automatically synced with your CRM system and will appear in your contact dashboard within 5 minutes.
            </p>
          </div>

          {/* Footer */}
          <div className="flex items-center justify-between pt-6 border-t border-border">
            <div className="text-sm text-text-secondary">
              <span className="text-error">*</span> Required fields
            </div>
            <div className="flex items-center space-x-3">
              <Button
                type="button"
                variant="outline"
                onClick={handleClose}
                disabled={isLoading}
              >
                Cancel
              </Button>
              <Button
                type="submit"
                variant="primary"
                disabled={isLoading}
                iconName={isLoading ? "Loader" : "Save"}
              >
                {isLoading ? 'Adding Contact...' : 'Add Contact'}
              </Button>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddContactModal;